/**
 * Response Configuration
 * 
 * Centralized configuration for AI response formatting, templates, and guidelines.
 * Based on response.md specifications.
 */

export interface ResponseTemplate {
  introduction?: string;
  structure: string[];
  conclusion?: string;
  requiredSections: string[];
  optionalSections?: string[];
  maxLength?: number;
  minLength?: number;
}

export interface BrandingGuidelines {
  appName: string;
  tagline: string;
  poweredByText: string;
  disclaimers: {
    general: string;
    educational: string;
    accuracy: string;
  };
  prohibitedTerms: string[];
  approvedPhrases: string[];
}

export interface QualityThresholds {
  minQualityScore: number;
  minWordCount: number;
  maxWordCount: number;
  requiredElements: {
    hasStructure: boolean;
    hasExamples: boolean;
    hasConclusion: boolean;
  };
}

export interface ResponseConfig {
  templates: {
    explanation: ResponseTemplate;
    study_plan: ResponseTemplate;
    practice: ResponseTemplate;
    concept: ResponseTemplate;
    default: ResponseTemplate;
  };
  branding: BrandingGuidelines;
  quality: QualityThresholds;
  formatting: {
    useMarkdown: boolean;
    useHeaders: boolean;
    useLists: boolean;
    useCodeBlocks: boolean;
    useEmphasis: boolean;
  };
  optimization: {
    enableCaching: boolean;
    enableFiltering: boolean;
    enableEnhancement: boolean;
    enableAnalytics: boolean;
  };
}

export const responseConfig: ResponseConfig = {
  templates: {
    explanation: {
      introduction: 'Let Teddy explain this concept clearly for you! üß∏',
      structure: [
        '## Overview',
        '## Detailed Explanation',
        '## Key Points',
        '## Examples',
        '## Summary'
      ],
      requiredSections: ['Overview', 'Detailed Explanation', 'Summary'],
      optionalSections: ['Examples', 'Key Points'],
      minLength: 200,
      maxLength: 2000
    },
    
    study_plan: {
      introduction: 'Teddy has created a cozy study plan just for you! üß∏üìö',
      structure: [
        '## üìÖ Timeline',
        '## üìö Topics to Cover',
        '## üéØ Learning Objectives',
        '## üìù Study Resources',
        '## üìä Progress Tracking',
        '## ‚úÖ Milestones'
      ],
      requiredSections: ['Timeline', 'Topics to Cover', 'Learning Objectives'],
      optionalSections: ['Study Resources', 'Progress Tracking', 'Milestones'],
      minLength: 300,
      maxLength: 2500
    },
    
    practice: {
      introduction: 'Teddy has some practice questions to help you learn! üß∏‚ú®',
      structure: [
        '## Questions',
        '## Hints',
        '## Solutions',
        '## Explanations',
        '## Additional Practice'
      ],
      requiredSections: ['Questions'],
      optionalSections: ['Hints', 'Solutions', 'Explanations', 'Additional Practice'],
      minLength: 150,
      maxLength: 2000
    },
    
    concept: {
      introduction: 'Let\'s explore this concept together! Teddy loves learning new things! üß∏üí°',
      structure: [
        '## üìñ Definition',
        '## üîç Detailed Explanation',
        '## üí° Examples',
        '## üîó Related Concepts',
        '## ‚úÖ Quick Check',
        '## üìö Further Reading'
      ],
      requiredSections: ['Definition', 'Detailed Explanation'],
      optionalSections: ['Examples', 'Related Concepts', 'Quick Check', 'Further Reading'],
      minLength: 250,
      maxLength: 2000
    },
    
    default: {
      structure: [
        '## Response',
        '## Additional Information'
      ],
      requiredSections: ['Response'],
      minLength: 100,
      maxLength: 1500
    }
  },
  
  branding: {
    appName: 'Study Teddy',
    tagline: 'Your Cuddly AI Study Companion',
    poweredByText: 'Powered by Teddy AI',
    
    disclaimers: {
      general: 'This content is generated by AI and should be reviewed for accuracy.',
      educational: 'AI-generated educational content is meant to supplement, not replace, official study materials.',
      accuracy: 'While we strive for accuracy, please verify important information with authoritative sources.'
    },
    
    prohibitedTerms: [
      'DeepSeek',
      'GPT',
      'Claude',
      'Gemini',
      'OpenAI',
      'Anthropic',
      'Google AI',
      'ChatGPT',
      'Bard',
      'LLaMA',
      'API key',
      'token',
      'endpoint',
      'model',
      'training data',
      'parameters',
      'temperature',
      'top_p'
    ],
    
    approvedPhrases: [
      'Powered by Teddy AI',
      'Teddy-assisted learning',
      'Your cuddly AI tutor',
      'Teddy-generated content',
      'Your friendly study buddy',
      'Intelligent teddy tutoring',
      'Warm personalized learning',
      'Caring study companion'
    ]
  },
  
  quality: {
    minQualityScore: 70,
    minWordCount: 50,
    maxWordCount: 3000,
    
    requiredElements: {
      hasStructure: true,
      hasExamples: false, // Optional but recommended
      hasConclusion: true
    }
  },
  
  formatting: {
    useMarkdown: true,
    useHeaders: true,
    useLists: true,
    useCodeBlocks: true,
    useEmphasis: true
  },
  
  optimization: {
    enableCaching: true,
    enableFiltering: true,
    enableEnhancement: true,
    enableAnalytics: true
  }
};

/**
 * Get response template based on type
 */
export function getResponseTemplate(type: string): ResponseTemplate {
  const templates = responseConfig.templates;
  return templates[type as keyof typeof templates] || templates.default;
}

/**
 * Validate response against quality thresholds
 */
export function validateResponseQuality(
  response: string,
  qualityScore: number
): {
  isValid: boolean;
  issues: string[];
} {
  const issues: string[] = [];
  const wordCount = response.split(/\s+/).length;
  const { quality } = responseConfig;
  
  if (qualityScore < quality.minQualityScore) {
    issues.push(`Quality score ${qualityScore} is below minimum ${quality.minQualityScore}`);
  }
  
  if (wordCount < quality.minWordCount) {
    issues.push(`Word count ${wordCount} is below minimum ${quality.minWordCount}`);
  }
  
  if (wordCount > quality.maxWordCount) {
    issues.push(`Word count ${wordCount} exceeds maximum ${quality.maxWordCount}`);
  }
  
  if (quality.requiredElements.hasStructure && !response.includes('##')) {
    issues.push('Response lacks proper structure (headers)');
  }
  
  if (quality.requiredElements.hasConclusion && 
      !response.toLowerCase().includes('summary') && 
      !response.toLowerCase().includes('conclusion')) {
    issues.push('Response lacks a conclusion or summary');
  }
  
  return {
    isValid: issues.length === 0,
    issues
  };
}

/**
 * Check if a term is prohibited
 */
export function isProhibitedTerm(term: string): boolean {
  return responseConfig.branding.prohibitedTerms.some(
    prohibited => term.toLowerCase().includes(prohibited.toLowerCase())
  );
}

/**
 * Get approved branding phrase
 */
export function getApprovedPhrase(context: 'intro' | 'conclusion' | 'general'): string {
  const phrases = responseConfig.branding.approvedPhrases;
  
  switch (context) {
    case 'intro':
      return phrases[2]; // 'Your AI tutor'
    case 'conclusion':
      return phrases[0]; // 'Powered by AI'
    default:
      return phrases[1]; // 'AI-assisted learning'
  }
}

/**
 * Get disclaimer based on context
 */
export function getDisclaimer(type: 'general' | 'educational' | 'accuracy'): string {
  return responseConfig.branding.disclaimers[type];
}

/**
 * Export configuration for external use
 */
export default responseConfig;